import logging
import re
from datetime import datetime, timedelta
from typing import Dict

logger = logging.getLogger(__name__)

class CommandProcessor:
    def __init__(self):
        self.context = {}
    
    def process_command(self, command_type: str, entities: Dict) -> str:
        """Process the command based on its type and context"""
        logger.info(f"Processing command of type: {command_type} with entities: {entities}")
        
        try:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            if command_type == 'greeting':
                hour = datetime.now().hour
                greeting = (
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" if 5 <= hour < 12
                    else "–î–æ–±—Ä—ã–π –¥–µ–Ω—å" if 12 <= hour < 17
                    else "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" if 17 <= hour < 23
                    else "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
                )
                return f"{greeting}! –Ø - –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–ï–†–†–ê. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            elif command_type == 'task_creation':
                return format_task_creation(entities.get('description', ''))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–º–∞–Ω–¥
            business_commands = [
                'marketing', 'client', 'supplier', 'contract',
                'quality', 'risk', 'strategy', 'compliance',
                'innovation', 'document', 'search', 'contact',
                'project', 'analytics', 'employee'
            ]
            
            if command_type in business_commands:
                return format_business_command(command_type, entities.get('description', ''))
            
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
            
        except Exception as e:
            logger.error(f"Error processing command: {str(e)}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

command_processor = CommandProcessor()

def process_command(command_type: str, entities: Dict) -> str:
    """Global function to process commands"""
    return command_processor.process_command(command_type, entities)

def format_task_creation(description: str) -> str:
    """Format task creation response with parsed details"""
    if not description:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"

    logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: '{description}'")
    
    priority = '–≤—ã—Å–æ–∫–∏–π' if '—Å—Ä–æ—á–Ω' in description.lower() else '–æ–±—ã—á–Ω—ã–π'
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
    
    cleaners = [
        r't?[–µ—ç]—Ä—Ä?–∞?[,]?\s*',
        r'—Å–æ–∑–¥–∞–π(?:—Ç–µ)?\s+',
        r'—Å–æ–∑–¥–∞—Ç—å\s+',
        r'–¥–æ–±–∞–≤—å(?:—Ç–µ)?\s+',
        r'–¥–æ–±–∞–≤–∏—Ç—å\s+',
        r'–ø–æ—Å—Ç–∞–≤(?:—å|–∏—Ç–µ)?\s+',
        r'—Å—Ä–æ—á–Ω—É—é?\s+',
        r'–≤–∞–∂–Ω—É—é?\s+',
        r'–∫—Ä–∏—Ç–∏—á–Ω—É—é?\s+',
        r'–∑–∞–¥–∞—á—É\s*',
        r'–ø–æ—Ä—É—á–µ–Ω–∏–µ\s*',
        r'^[\s,\-‚Äì]+',
        r'[\s,\-‚Äì]+$'
    ]
    
    for pattern in cleaners:
        old_text = description
        description = re.sub(pattern, '', description, flags=re.IGNORECASE)
        if old_text != description:
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –æ—á–∏—Å—Ç–∫–∏: '{pattern}' -> '{description}'")
    
    task_date = None
    date_words = {
        '–∑–∞–≤—Ç—Ä–∞': timedelta(days=1),
        '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': timedelta(days=2),
        '—á–µ—Ä–µ–∑ –¥–µ–Ω—å': timedelta(days=1),
        '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é': timedelta(weeks=1),
        '—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü': timedelta(days=30)
    }
    
    for word, delta in date_words.items():
        if word in description.lower():
            task_date = datetime.now() + delta
            description = description.replace(word, '').strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ —Å–ª–æ–≤—É '{word}': {task_date}")
            break
    
    time_match = re.search(r'–≤\s+(\d{1,2})(?:[:.:](\d{2}))?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?', description)
    if time_match:
        hours = int(time_match.group(1))
        minutes = int(time_match.group(2)) if time_match.group(2) else 0
        
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            if task_date:
                task_date = task_date.replace(hour=hours, minute=minutes)
            else:
                task_date = datetime.now().replace(hour=hours, minute=minutes)
                if task_date < datetime.now():
                    task_date += timedelta(days=1)
            
            description = re.sub(r'–≤\s+\d{1,2}(?:[:.:]?\d{2})?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?\s*', '', description)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hours}:{minutes:02d}")
    
    description = ' '.join(word for word in description.split() if word)
    description = description.rstrip('.')
    
    response_parts = [
        "‚úÖ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:",
        f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}"
    ]
    
    if task_date:
        date_format = '%d.%m.%Y –≤ %H:%M' if task_date.hour != 0 or task_date.minute != 0 else '%d.%m.%Y'
        response_parts.append(f"\nüìÖ {'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è' if '–≤' in date_format else '–î–∞—Ç–∞'}: {task_date.strftime(date_format)}")
    
    response_parts.extend([
        f"\n‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.capitalize()}",
        "\n‚ú® –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    ])
    
    return ''.join(response_parts)

def format_business_command(command_type: str, description: str) -> str:
    """Format business command response"""
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞: {command_type}")
    logger.debug(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
    
    if not description:
        logger.warning("–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ {command_type}"
    
    responses = {
        'finance': {
            'icon': 'üí∞',
            'action': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
            'category': '–§–∏–Ω–∞–Ω—Å—ã'
        },
        'marketing': {
            'icon': 'üì¢',
            'action': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
            'category': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'
        },
        'project': {
            'icon': 'üìä',
            'action': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞',
            'category': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏'
        },
        'client': {
            'icon': 'üë•',
            'action': '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
            'category': '–ö–ª–∏–µ–Ω—Ç—ã'
        }
    }
    
    response_info = responses.get(command_type, {
        'icon': 'üìù',
        'action': '–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É',
        'category': command_type.capitalize()
    })
    
    return (
        f"{response_info['icon']} {response_info['action']}:\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {response_info['category']}\n"
        "‚ú® –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    )