import logging
import re
from datetime import datetime, timedelta
from typing import Dict

logger = logging.getLogger(__name__)

def format_task_creation(description: str) -> str:
    """Format task creation response with parsed details"""
    if not description:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: '{description}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ª–æ–≤–∞ "—Å—Ä–æ—á–Ω"
    priority = '–≤—ã—Å–æ–∫–∏–π' if '—Å—Ä–æ—á–Ω' in description.lower() else '–æ–±—ã—á–Ω—ã–π'
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
    
    # –®–∞–≥ 2: –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
    cleaners = [
        r'—Ç–µ—Ä—Ä–∞\s*[,]?\s*',
        r'—Å–æ–∑–¥–∞–π\s+',
        r'—Å–æ–∑–¥–∞—Ç—å\s+',
        r'–¥–æ–±–∞–≤—å\s+',
        r'–¥–æ–±–∞–≤–∏—Ç—å\s+',
        r'—Å—Ä–æ—á–Ω—É—é?\s+',
        r'–≤–∞–∂–Ω—É—é?\s+',
        r'–∫—Ä–∏—Ç–∏—á–Ω—É—é?\s+',
        r'–∑–∞–¥–∞—á—É\s+',
        r'^[\s,\-‚Äì]+',
        r'[\s,\-‚Äì]+$'
    ]
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    for pattern in cleaners:
        old_text = description
        description = re.sub(pattern, '', description, flags=re.IGNORECASE)
        if old_text != description:
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –æ—á–∏—Å—Ç–∫–∏: '{pattern}' -> '{description}'")
    
    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    task_date = None
    
    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
    date_words = {
        '–∑–∞–≤—Ç—Ä–∞': timedelta(days=1),
        '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': timedelta(days=2),
        '—á–µ—Ä–µ–∑ –¥–µ–Ω—å': timedelta(days=1),
        '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é': timedelta(weeks=1),
        '—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü': timedelta(days=30)
    }
    
    for word, delta in date_words.items():
        if word in description.lower():
            task_date = datetime.now() + delta
            description = description.replace(word, '').strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ —Å–ª–æ–≤—É '{word}': {task_date}")
            break
    
    # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏
    time_match = re.search(r'–≤\s+(\d{1,2})(?:[:.:](\d{2}))?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?', description)
    if time_match:
        hours = int(time_match.group(1))
        minutes = int(time_match.group(2)) if time_match.group(2) else 0
        
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            if task_date:
                task_date = task_date.replace(hour=hours, minute=minutes)
            else:
                task_date = datetime.now().replace(hour=hours, minute=minutes)
                if task_date < datetime.now():
                    task_date += timedelta(days=1)
            
            description = re.sub(r'–≤\s+\d{1,2}(?:[:.:]?\d{2})?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?\s*', '', description)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hours}:{minutes:02d}")
    
    # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = ' '.join(word for word in description.split() if word)
    logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
    
    # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_parts = [
        "‚úÖ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:\n",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}"
    ]
    
    if task_date:
        date_format = '%d.%m.%Y –≤ %H:%M' if task_date.hour != 0 or task_date.minute != 0 else '%d.%m.%Y'
        response_parts.append(f"üìÖ {'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è' if '–≤' in date_format else '–î–∞—Ç–∞'}: {task_date.strftime(date_format)}")
    
    response_parts.extend([
        f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.capitalize()}",
        "‚ú® –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    ])
    
    return '\n'.join(response_parts)

class CommandProcessor:
    def __init__(self):
        self.context = {}
    
    def process_command(self, command_type: str, entities: Dict) -> str:
        """Process the command based on its type"""
        logger.info(f"Processing command of type: {command_type} with entities: {entities}")
        
        if command_type == 'greeting':
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–ï–†–†–ê. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        if command_type == 'task_creation':
            return format_task_creation(entities.get('description', ''))
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."

# Create a singleton instance
command_processor = CommandProcessor()

def process_command(command_type: str, entities: Dict) -> str:
    """Global function to process commands"""
    return command_processor.process_command(command_type, entities)
