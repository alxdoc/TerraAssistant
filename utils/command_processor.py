import logging
from typing import Dict
import re

import re
from datetime import datetime, timedelta
logger = logging.getLogger(__name__)

def format_task_creation(description: str) -> str:
    """Format task creation response with parsed details"""
    if not description:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    priority = '–æ–±—ã—á–Ω—ã–π'
    priority_keywords = {
        '—Å—Ä–æ—á–Ω–æ': '–≤—ã—Å–æ–∫–∏–π',
        '—Å—Ä–æ—á–Ω—É—é': '–≤—ã—Å–æ–∫–∏–π',
        '—Å—Ä–æ—á–Ω–∞—è': '–≤—ã—Å–æ–∫–∏–π',
        '—Å—Ä–æ—á–Ω–æ–µ': '–≤—ã—Å–æ–∫–∏–π',
        '—Å—Ä–æ—á–Ω—ã–π': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω–æ': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω—É—é': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω–∞—è': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω–æ–µ': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω—ã–π': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω–æ': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω—É—é': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω–∞—è': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω–æ–µ': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω—ã–π': '–≤—ã—Å–æ–∫–∏–π',
        '–Ω–µ–≤–∞–∂–Ω–æ': '–Ω–∏–∑–∫–∏–π',
        '–Ω–µ–≤–∞–∂–Ω—É—é': '–Ω–∏–∑–∫–∏–π',
        '–Ω–µ–≤–∞–∂–Ω–∞—è': '–Ω–∏–∑–∫–∏–π',
        '–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ': '–Ω–∏–∑–∫–∏–π',
        '–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—É—é': '–Ω–∏–∑–∫–∏–π',
        '–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è': '–Ω–∏–∑–∫–∏–π'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ –ª—é–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    description_lower = description.lower()
    for keyword, level in priority_keywords.items():
        if keyword.lower() in description_lower:
            priority = level
            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            description = re.sub(f'\\b{keyword}\\b\\s*', '', description, flags=re.IGNORECASE)
            break

    # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
    description = re.sub(r'^(—Ç–µ—Ä[–∞—Ä]–∞?|terra),?\s*', '', description, flags=re.IGNORECASE)
    description = re.sub(r'^(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|–¥–æ–±–∞–≤—å|–¥–æ–±–∞–≤–∏—Ç—å)\s+', '', description, flags=re.IGNORECASE)
    description = re.sub(r'^\s*,\s*', '', description)  # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
    description = description.strip()
    
    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    date_keywords = {
        '–∑–∞–≤—Ç—Ä–∞': datetime.now() + timedelta(days=1),
        '—Å–µ–≥–æ–¥–Ω—è': datetime.now(),
        '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': datetime.now() + timedelta(days=2),
        '—á–µ—Ä–µ–∑ –¥–µ–Ω—å': datetime.now() + timedelta(days=1),
        '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é': datetime.now() + timedelta(weeks=1),
        '—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü': datetime.now() + timedelta(days=30)
    }
    
    # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    time_pattern = r'–≤ (\d{1,2})(?:[:.](\d{2}))?\s*(?:—á–∞—Å–æ–≤|—á–∞—Å|—á)?'
    
    task_date = None
    task_time = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
    for keyword, date in date_keywords.items():
        if keyword in description:
            task_date = date
            description = description.replace(keyword, '').strip()
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    time_match = re.search(time_pattern, description)
    if time_match:
        hours = int(time_match.group(1))
        minutes = int(time_match.group(2)) if time_match.group(2) else 0
        
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            if task_date:
                task_date = task_date.replace(hour=hours, minute=minutes)
            else:
                task_date = datetime.now().replace(hour=hours, minute=minutes)
                if task_date < datetime.now():
                    task_date += timedelta(days=1)
            
            description = re.sub(time_pattern, '', description).strip()
    
    # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    description = re.sub(r'[.\s]+$', '', description).strip()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "‚úÖ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:\n\n"
    response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
    
    if task_date:
        if task_date.hour != 0 or task_date.minute != 0:
            response += f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {task_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        else:
            response += f"üìÖ –î–∞—Ç–∞: {task_date.strftime('%d.%m.%Y')}\n"
    
    response += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.capitalize()}\n"
    response += "\n‚ú® –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    
    return response

class CommandProcessor:
    def __init__(self):
        self.context = {}
        
    def _format_currency(self, amount: float) -> str:
        """Format currency amount with thousand separators"""
        return f"{amount:,.0f}"
        
    def handle_innovation(self, entities: Dict) -> str:
        """Handle innovation-related commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏"

        innovation_actions = {
            '–ø—Ä–æ–µ–∫—Ç': 'projects',
            '–∏–¥–µ–∏': 'ideas',
            '—Å—Ç–∞—Ç—É—Å': 'status',
            '–±—é–¥–∂–µ—Ç': 'budget',
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technologies',
            '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã': 'results'
        }

        action = None
        for key, value in innovation_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'projects': lambda: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n" + \
                               "–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: 12\n" + \
                               "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 5\n" + \
                               "–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: 3\n" + \
                               "–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 4",
            'ideas': lambda: "–ë–∞–Ω–∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π:\n" + \
                            "–í—Å–µ–≥–æ –∏–¥–µ–π: 85\n" + \
                            "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: 15\n" + \
                            "–û–¥–æ–±—Ä–µ–Ω–æ: 7\n" + \
                            "–í —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: 4",
            'status': lambda: "–°—Ç–∞—Ç—É—Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–π:\n" + \
                            "–£—Å–ø–µ—à–Ω—ã–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è: 8\n" + \
                            "–ü–∏–ª–æ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: 3\n" + \
                            "–ü–∞—Ç–µ–Ω—Ç—ã: 2\n" + \
                            "–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã: 5",
            'budget': lambda: f"–ë—é–¥–∂–µ—Ç –Ω–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏:\n" + \
                            f"–û–±—â–∏–π –±—é–¥–∂–µ—Ç: {self._format_currency(25000000)} —Ä—É–±.\n" + \
                            f"–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {self._format_currency(12000000)} —Ä—É–±.\n" + \
                            "ROI: 145%\n" + \
                            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: –í—ã—Å–æ–∫–∏–π",
            'results': lambda: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–π:\n" + \
                              "–ù–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: 3\n" + \
                              "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 15%\n" + \
                              "–≠–∫–æ–Ω–æ–º–∏—è: " + self._format_currency(8000000) + " —Ä—É–±.\n" + \
                              "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 92%",
            'technologies': lambda: "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n" + \
                                  "AI/ML: 3 –ø—Ä–æ–µ–∫—Ç–∞\n" + \
                                  "–ë–ª–æ–∫—á–µ–π–Ω: 1 –ø—Ä–æ–µ–∫—Ç\n" + \
                                  "–†–æ–±–æ—Ç–∏–∑–∞—Ü–∏—è: 2 –ø—Ä–æ–µ–∫—Ç–∞\n" + \
                                  "Big Data: 4 –ø—Ä–æ–µ–∫—Ç–∞"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def process_command(self, command_type: str, entities: Dict) -> str:
        """Process the command based on its type"""
        logger.debug(f"Processing command of type: {command_type} with entities: {entities}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if command_type == 'greeting':
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–ï–†–†–ê. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers = {
            'innovation': self.handle_innovation,
            'marketing': self.handle_marketing,
            'client': self.handle_client,
            'supplier': self.handle_supplier,
            'contract': self.handle_contract,
            'quality': self.handle_quality,
            'risk': self.handle_risk,
            'strategy': self.handle_strategy,
            'task_creation': lambda x: format_task_creation(x.get('description', '')),
            'document_analysis': lambda x: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç: " + x.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
            'search': lambda x: "–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + x.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
            'calendar': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'contact': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'reminder': lambda x: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + x.get('description', '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'),
            'finance': lambda x: "–†–∞–±–æ—Ç–∞—é —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'project': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –ø—Ä–æ–µ–∫—Ç–æ–º: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'sales': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'inventory': lambda x: "–†–∞–±–æ—Ç–∞—é —Å–æ —Å–∫–ª–∞–¥–æ–º: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'analytics': lambda x: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'employee': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π'),
            'meeting': lambda x: "–†–∞–±–æ—Ç–∞—é —Å –≤—Å—Ç—Ä–µ—á–∞–º–∏: " + x.get('description', '–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π')
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
            handler = handlers.get(command_type)
            
            if handler:
                logger.info(f"Found handler for command type: {command_type}")
                return handler(entities)
            else:
                logger.warning(f"Unknown command type: {command_type}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                
        except Exception as e:
            logger.error(f"Error processing command: {str(e)}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


    def handle_marketing(self, entities: Dict) -> str:
        """Handle marketing-related commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"

        marketing_actions = {
            '–∫–∞–º–ø–∞–Ω–∏—è': 'campaign',
            '–∞–Ω–∞–ª–∏–∑': 'analysis',
            '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ': 'promotion',
            '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': 'strategy',
            '–±—Ä–µ–Ω–¥': 'brand',
            '—Å–æ—Ü—Å–µ—Ç–∏': 'social'
        }

        action = None
        for key, value in marketing_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'campaign': lambda: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è:\n" + \
                            "–ö–∞–Ω–∞–ª—ã: Digital, SMM, Email\n" + \
                            "–ë—é–¥–∂–µ—Ç: " + self._format_currency(150000) + " —Ä—É–±.\n" + \
                            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 –º–µ—Å—è—Ü–∞\n" + \
                            "–û—Ö–≤–∞—Ç: 50,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            'analysis': lambda: "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:\n" + \
                            "–†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞: " + self._format_currency(1500000000) + " —Ä—É–±.\n" + \
                            "–†–æ—Å—Ç: 15% –≤ –≥–æ–¥\n" + \
                            "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: 12 –æ—Å–Ω–æ–≤–Ω—ã—Ö\n" + \
                            "–î–æ–ª—è —Ä—ã–Ω–∫–∞: 8%",
            'promotion': lambda: "–ü–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:\n" + \
                             "–ö–∞–Ω–∞–ª—ã: 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö\n" + \
                             "–ö–æ–Ω–≤–µ—Ä—Å–∏—è: 2.5%\n" + \
                             "ROI: 185%\n" + \
                             "–ù–æ–≤—ã–µ –ª–∏–¥—ã: 250",
            'strategy': lambda: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:\n" + \
                             "–¢–∏–ø: –û–º–Ω–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è\n" + \
                             "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: B2B\n" + \
                             "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CAC, LTV, ROI\n" + \
                             "–ö–∞–Ω–∞–ª—ã: Digital, Offline, PR",
            'brand': lambda: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–º:\n" + \
                          "–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å: 65%\n" + \
                          "–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ: –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ\n" + \
                          "NPS: 75\n" + \
                          "–ê–¥–≤–æ–∫–∞—Ç—ã –±—Ä–µ–Ω–¥–∞: 2,500",
            'social': lambda: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n" + \
                           "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: 50,000\n" + \
                           "–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 4.8%\n" + \
                           "–û—Ö–≤–∞—Ç: 150,000\n" + \
                           "–õ–∏–¥—ã: 180 –≤ –º–µ—Å—è—Ü"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_client(self, entities: Dict) -> str:
        """Handle client-related commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"

        client_actions = {
            '–±–∞–∑–∞': 'database',
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'statistics',
            '–ª–æ—è–ª—å–Ω–æ—Å—Ç—å': 'loyalty',
            '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å': 'feedback',
            '—Å–µ–≥–º–µ–Ω—Ç': 'segment',
            '–∏—Å—Ç–æ—Ä–∏—è': 'history'
        }

        action = None
        for key, value in client_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'database': lambda: "–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n" + \
                             "–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: 1,500\n" + \
                             "–ê–∫—Ç–∏–≤–Ω—ã—Ö: 850\n" + \
                             "–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: 45\n" + \
                             "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: " + self._format_currency(25000) + " —Ä—É–±.",
            'statistics': lambda: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:\n" + \
                               "–£–¥–µ—Ä–∂–∞–Ω–∏–µ: 85%\n" + \
                               "–°—Ä–µ–¥–Ω–∏–π LTV: " + self._format_currency(120000) + " —Ä—É–±.\n" + \
                               "CAC: " + self._format_currency(15000) + " —Ä—É–±.\n" + \
                               "–°—Ä–æ–∫ –∂–∏–∑–Ω–∏: 24 –º–µ—Å—è—Ü–∞",
            'loyalty': lambda: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n" + \
                            "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 750\n" + \
                            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 65%\n" + \
                            "–°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: " + self._format_currency(2500) + " —Ä—É–±.\n" + \
                            "–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: 185%",
            'feedback': lambda: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n" + \
                             "NPS: 75\n" + \
                             "CSAT: 4.8/5\n" + \
                             "–û—Ç–∑—ã–≤–æ–≤ –∑–∞ –º–µ—Å—è—Ü: 125\n" + \
                             "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: 95%",
            'segment': lambda: "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:\n" + \
                            "Premium: 15%\n" + \
                            "Business: 45%\n" + \
                            "Standard: 40%\n" + \
                            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: 25%",
            'history': lambda: "–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:\n" + \
                            "–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: 2,500\n" + \
                            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2.5 —á–∞—Å–∞\n" + \
                            "–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 85%\n" + \
                            "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: 45%"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_supplier(self, entities: Dict) -> str:
        """Handle supplier-related commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏"

        supplier_actions = {
            '—Å–ø–∏—Å–æ–∫': 'list',
            '–æ—Ü–µ–Ω–∫–∞': 'evaluation',
            '–∑–∞–∫–∞–∑': 'order',
            '–∫–æ–Ω—Ç—Ä–∞–∫—Ç': 'contract',
            '–∏—Å—Ç–æ—Ä–∏—è': 'history',
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'statistics'
        }

        action = None
        for key, value in supplier_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'list': lambda: "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n" + \
                         "–ê–∫—Ç–∏–≤–Ω—ã—Ö: 25\n" + \
                         "–ù–æ–≤—ã—Ö: 3\n" + \
                         "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: 5\n" + \
                         "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: 2",
            'evaluation': lambda: "–û—Ü–µ–Ω–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n" + \
                               "–ö–∞—á–µ—Å—Ç–≤–æ: 4.8/5\n" + \
                               "–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å: 95%\n" + \
                               "–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: 4.5/5\n" + \
                               "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: 4.7/5",
            'order': lambda: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤:\n" + \
                          "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ: 12\n" + \
                          "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 8\n" + \
                          "–ü–æ–ª—É—á–µ–Ω–æ: 15\n" + \
                          "–û–±—â–∞—è —Å—É–º–º–∞: " + self._format_currency(750000) + " —Ä—É–±.",
            'contract': lambda: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏:\n" + \
                             "–ê–∫—Ç–∏–≤–Ω—ã—Ö: 18\n" + \
                             "–ù–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏: 3\n" + \
                             "–ò—Å—Ç–µ–∫–∞—é—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: 2\n" + \
                             "–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è: 4",
            'history': lambda: "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫:\n" + \
                            "–í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–æ–∫: 150\n" + \
                            "–í–æ–≤—Ä–µ–º—è: 142\n" + \
                            "–° –∑–∞–¥–µ—Ä–∂–∫–æ–π: 8\n" + \
                            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 5 –¥–Ω–µ–π",
            'statistics': lambda: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n" + \
                                "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: 2.5 –≥–æ–¥–∞\n" + \
                                "–ü—Ä–æ—Ü–µ–Ω—Ç –±—Ä–∞–∫–∞: 0.5%\n" + \
                                "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: 1.2%\n" + \
                                "–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∑–∞–∫—É–ø–∫–∞—Ö: 15%"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_contract(self, entities: Dict) -> str:
        """Handle contract-related commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏"

        contract_actions = {
            '—Å—Ç–∞—Ç—É—Å': 'status',
            '—Å–æ–∑–¥–∞—Ç—å': 'create',
            '–∏–∑–º–µ–Ω–∏—Ç—å': 'modify',
            '–ø—Ä–æ–¥–ª–∏—Ç—å': 'extend',
            '—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å': 'terminate',
            '–∞—Ä—Ö–∏–≤': 'archive'
        }

        action = None
        for key, value in contract_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'status': lambda: "–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–æ–≤:\n" + \
                           "–ê–∫—Ç–∏–≤–Ω—ã—Ö: 45\n" + \
                           "–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏: 8\n" + \
                           "–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è: 5\n" + \
                           "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: 2",
            'create': lambda: "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞:\n" + \
                           "–ù–æ–º–µ—Ä: CTR-2024-001\n" + \
                           "–¢–∏–ø: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n" + \
                           "–°—Ä–æ–∫: 12 –º–µ—Å—è—Ü–µ–≤\n" + \
                           "–°—Ç–∞—Ç—É—Å: –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏",
            'modify': lambda: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞:\n" + \
                           "–í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: 3\n" + \
                           "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: 2.1\n" + \
                           "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ: –Æ—Ä.–æ—Ç–¥–µ–ª\n" + \
                           "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è",
            'extend': lambda: "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞:\n" + \
                           "–ù–æ–≤—ã–π —Å—Ä–æ–∫: +12 –º–µ—Å—è—Ü–µ–≤\n" + \
                           "–£—Å–ª–æ–≤–∏—è: –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n" + \
                           "–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ø.—Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
            'terminate': lambda: "–†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞:\n" + \
                              "–ü—Ä–∏—á–∏–Ω–∞: –ü–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω\n" + \
                              "–î–∞—Ç–∞: 31.12.2024\n" + \
                              "–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
            'archive': lambda: "–ê—Ä—Ö–∏–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:\n" + \
                            "–í—Å–µ–≥–æ: 250\n" + \
                            "–ó–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥: 45\n" + \
                            "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: 225\n" + \
                            "–î–æ—Å—Ä–æ—á–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—ã—Ö: 25"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_quality(self, entities: Dict) -> str:
        """Handle quality management commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–∞—á–µ—Å—Ç–≤–æ–º"

        quality_actions = {
            '–ø—Ä–æ–≤–µ—Ä–∫–∞': 'check',
            '–∫–æ–Ω—Ç—Ä–æ–ª—å': 'control',
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã': 'standards',
            '—É–ª—É—á—à–µ–Ω–∏–µ': 'improvement',
            '–æ—Ç—á–µ—Ç': 'report',
            '–º–µ—Ç—Ä–∏–∫–∏': 'metrics'
        }

        action = None
        for key, value in quality_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'check': lambda: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:\n" + \
                          "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º: 98%\n" + \
                          "–í—ã—è–≤–ª–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: 5\n" + \
                          "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: 0\n" + \
                          "–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: 3",
            'control': lambda: "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:\n" + \
                            "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: 125\n" + \
                            "–ü—Ä–æ–π–¥–µ–Ω–æ: 120\n" + \
                            "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: 5\n" + \
                            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: 96%",
            'standards': lambda: "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞:\n" + \
                              "–í—Å–µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: 45\n" + \
                              "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É: 8\n" + \
                              "–ù–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ: 3\n" + \
                              "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ISO: 100%",
            'improvement': lambda: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:\n" + \
                                "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤ –∑–∞–ø—É—â–µ–Ω–æ: 12\n" + \
                                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 8\n" + \
                                "–í –ø—Ä–æ—Ü–µ—Å—Å–µ: 4\n" + \
                                "–≠—Ñ—Ñ–µ–∫—Ç: +15% –∫ –∫–∞—á–µ—Å—Ç–≤—É",
            'report': lambda: "–û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:\n" + \
                           "–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: 4.8/5\n" + \
                           "–¢—Ä–µ–Ω–¥: –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π\n" + \
                           "–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: 5\n" + \
                           "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: " + self._format_currency(250000) + " —Ä—É–±.",
            'metrics': lambda: "–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:\n" + \
                            "–î–µ—Ñ–µ–∫—Ç—ã: -25%\n" + \
                            "–í—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: -35%\n" + \
                            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: +15%\n" + \
                            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞: -10%"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_risk(self, entities: Dict) -> str:
        """Handle risk management commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ä–∏—Å–∫–∞–º–∏"

        risk_actions = {
            '–∞–Ω–∞–ª–∏–∑': 'analysis',
            '–æ—Ü–µ–Ω–∫–∞': 'assessment',
            '–º–∏—Ç–∏–≥–∞—Ü–∏—è': 'mitigation',
            '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥': 'monitoring',
            '–æ—Ç—á–µ—Ç': 'report',
            '–ø—Ä–æ–≥–Ω–æ–∑': 'forecast'
        }

        action = None
        for key, value in risk_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'analysis': lambda: "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:\n" + \
                             "–í—ã—è–≤–ª–µ–Ω–æ —Ä–∏—Å–∫–æ–≤: 25\n" + \
                             "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: 3\n" + \
                             "–°—Ä–µ–¥–Ω–∏—Ö: 12\n" + \
                             "–ù–∏–∑–∫–∏—Ö: 10",
            'assessment': lambda: "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:\n" + \
                               "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ: –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n" + \
                               "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n" + \
                               "–†—ã–Ω–æ—á–Ω—ã–µ: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n" + \
                               "–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å",
            'mitigation': lambda: "–ú–∏—Ç–∏–≥–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤:\n" + \
                               "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: 15 –º–µ—Ä\n" + \
                               "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 10\n" + \
                               "–í –ø—Ä–æ—Ü–µ—Å—Å–µ: 5\n" + \
                               "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 85%",
            'monitoring': lambda: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤:\n" + \
                               "–ü–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º: 20\n" + \
                               "–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: 5\n" + \
                               "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n" + \
                               "–¢—Ä–µ–Ω–¥: –°—Ç–∞–±–∏–ª—å–Ω—ã–π",
            'report': lambda: "–û—Ç—á–µ—Ç –ø–æ —Ä–∏—Å–∫–∞–º:\n" + \
                           "–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: –£–º–µ—Ä–µ–Ω–Ω—ã–π\n" + \
                           "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: -15%\n" + \
                           "–ù–æ–≤—ã–µ —Ä–∏—Å–∫–∏: 3\n" + \
                           "–ó–∞–∫—Ä—ã—Ç—ã–µ —Ä–∏—Å–∫–∏: 5",
            'forecast': lambda: "–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–æ–≤:\n" + \
                             "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π: –°—Ç–∞–±–∏–ª—å–Ω—ã–π\n" + \
                             "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π: –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç\n" + \
                             "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏: 2\n" + \
                             "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 8"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∏—Å–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_strategy(self, entities: Dict) -> str:
        """Handle strategy management commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"

        strategy_actions = {
            '—Ü–µ–ª–∏': 'goals',
            '–∞–Ω–∞–ª–∏–∑': 'analysis',
            '–ø–ª–∞–Ω': 'plan',
            '—Ä–∞–∑–≤–∏—Ç–∏–µ': 'development',
            '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã': 'results',
            '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞': 'adjustment'
        }

        action = None
        for key, value in strategy_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'goals': lambda: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏:\n" + \
                          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5\n" + \
                          "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: 2\n" + \
                          "–í –ø—Ä–æ—Ü–µ—Å—Å–µ: 3\n" + \
                          "–ü—Ä–æ–≥—Ä–µ—Å—Å: 65%",
            'analysis': lambda: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n" + \
                             "SWOT: –û–±–Ω–æ–≤–ª–µ–Ω\n" + \
                             "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ê–∫—Ç—É–∞–ª–µ–Ω\n" + \
                             "–†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: +5 –Ω–æ–≤—ã—Ö\n" + \
                             "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 12",
            'plan': lambda: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω:\n" + \
                         "–ì–æ—Ä–∏–∑–æ–Ω—Ç: 3 –≥–æ–¥–∞\n" + \
                         "–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: 8\n" + \
                         "–ë—é–¥–∂–µ—Ç: " + self._format_currency(15000000) + " —Ä—É–±.\n" + \
                         "–†–∏—Å–∫–∏: –£–º–µ—Ä–µ–Ω–Ω—ã–µ",
            'development': lambda: "–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞:\n" + \
                                "–ù–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: 3\n" + \
                                "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: 2 —Ä–µ–≥–∏–æ–Ω–∞\n" + \
                                "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: " + self._format_currency(5000000) + " —Ä—É–±.\n" + \
                                "ROI –ø—Ä–æ–≥–Ω–æ–∑: 185%",
            'results': lambda: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + \
                            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π: 75%\n" + \
                            "–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: +25%\n" + \
                            "–î–æ–ª—è —Ä—ã–Ω–∫–∞: +5%\n" + \
                            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è",
            'adjustment': lambda: "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + \
                               "–í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: 4\n" + \
                               "–ü—Ä–∏—á–∏–Ω—ã: –†—ã–Ω–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n" + \
                               "–í–ª–∏—è–Ω–∏–µ: –£–º–µ—Ä–µ–Ω–Ω–æ–µ\n" + \
                               "–°—Ç–∞—Ç—É—Å: –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_compliance(self, entities: Dict) -> str:
        """Handle compliance management commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–æ–º–ø–ª–∞–µ–Ω—Å"

        compliance_actions = {
            '–ø—Ä–æ–≤–µ—Ä–∫–∞': 'audit',
            '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è': 'requirements',
            '–æ—Ç—á–µ—Ç': 'report',
            '—Ä–∏—Å–∫–∏': 'risks',
            '–æ–±—É—á–µ–Ω–∏–µ': 'training',
            '–Ω–∞—Ä—É—à–µ–Ω–∏—è': 'violations'
        }

        action = None
        for key, value in compliance_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'audit': lambda: "–ê—É–¥–∏—Ç –∫–æ–º–ø–ª–∞–µ–Ω—Å:\n" + \
                          "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 25\n" + \
                          "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: 22\n" + \
                          "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è: 3\n" + \
                          "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: 0",
            'requirements': lambda: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–∞–µ–Ω—Å:\n" + \
                                "–í—Å–µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: 85\n" + \
                                "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 82\n" + \
                                "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: 3\n" + \
                                "–ù–æ–≤—ã—Ö: 5",
            'report': lambda: "–û—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–ª–∞–µ–Ω—Å:\n" + \
                           "–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: –í—ã—Å–æ–∫–∏–π\n" + \
                           "–ò–∑–º–µ–Ω–µ–Ω–∏—è: +5%\n" + \
                           "–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: 8\n" + \
                           "–û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è: 3",
            'risks': lambda: "–ö–æ–º–ø–ª–∞–µ–Ω—Å-—Ä–∏—Å–∫–∏:\n" + \
                          "–í—ã—è–≤–ª–µ–Ω–æ: 15\n" + \
                          "–£—Å—Ç—Ä–∞–Ω–µ–Ω–æ: 12\n" + \
                          "–í —Ä–∞–±–æ—Ç–µ: 3\n" + \
                          "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ: 2",
            'training': lambda: "–û–±—É—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–ø–ª–∞–µ–Ω—Å:\n" + \
                             "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: 12\n" + \
                             "–û–±—É—á–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 150\n" + \
                             "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 95%\n" + \
                             "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: 3 –∫—É—Ä—Å–∞",
            'violations': lambda: "–ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–º–ø–ª–∞–µ–Ω—Å:\n" + \
                               "–í—Å–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–æ: 8\n" + \
                               "–£—Å—Ç—Ä–∞–Ω–µ–Ω–æ: 7\n" + \
                               "–í –ø—Ä–æ—Ü–µ—Å—Å–µ: 1\n" + \
                               "–ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã: 5"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–ø–ª–∞–µ–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

    def handle_innovation(self, entities: Dict) -> str:
        """Handle innovation management commands"""
        description = entities.get('description', '').lower()
        if not description:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏"

        innovation_actions = {
            '–ø—Ä–æ–µ–∫—Ç—ã': 'projects',
            '–∏–¥–µ–∏': 'ideas',
            '—Å—Ç–∞—Ç—É—Å': 'status',
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technologies',
            '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã': 'results',
            '–±—é–¥–∂–µ—Ç': 'budget'
        }

        action = None
        for key, value in innovation_actions.items():
            if key in description:
                action = value
                break

        responses = {
            'projects': lambda: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n" + \
                             "–ê–∫—Ç–∏–≤–Ω—ã—Ö: 8\n" + \
                             "–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 5\n" + \
                             "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: 3\n" + \
                             "–û–±—â–∏–π –±—é–¥–∂–µ—Ç: " + self._format_currency(5000000) + " —Ä—É–±.",
            'ideas': lambda: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏:\n" + \
                          "–í –±–∞–Ω–∫–µ –∏–¥–µ–π: 45\n" + \
                          "–ù–∞ –æ—Ü–µ–Ω–∫–µ: 12\n" + \
                          "–û–¥–æ–±—Ä–µ–Ω–æ: 8\n" + \
                          "–†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è: 3",
            'status': lambda: "–°—Ç–∞—Ç—É—Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–π:\n" + \
                           "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 75%\n" + \
                           "–£—Å–ø–µ—à–Ω—ã—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏–π: 12\n" + \
                           "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: " + self._format_currency(2500000) + " —Ä—É–±.\n" + \
                           "ROI: 165%",
            'technologies': lambda: "–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n" + \
                                "–í–Ω–µ–¥—Ä–µ–Ω–æ: 5\n" + \
                                "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: 3\n" + \
                                "–ù–∞ –∏–∑—É—á–µ–Ω–∏–∏: 8\n" + \
                                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +25%",
            'results': lambda: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–π:\n" + \
                            "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 35%\n" + \
                            "–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç: 15%\n" + \
                            "–†–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 28%\n" + \
                            "–ù–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: 3",
            'budget': lambda: "–ë—é–¥–∂–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–π:\n" + \
                           "–í—ã–¥–µ–ª–µ–Ω–æ: " + self._format_currency(10000000) + " —Ä—É–±.\n" + \
                           "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: 65%\n" + \
                           "ROI —Ç–µ–∫—É—â–∏–π: 145%\n" + \
                           "–ü—Ä–æ–≥–Ω–æ–∑ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 18 –º–µ—Å—è—Ü–µ–≤"
        }

        return responses.get(action or 'unknown', lambda: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")()

# Create a singleton instance
command_processor = CommandProcessor()

def process_command(command_type: str, entities: Dict) -> str:
    """Global function to process commands"""
    return command_processor.process_command(command_type, entities)