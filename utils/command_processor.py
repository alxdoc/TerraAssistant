import logging
import re
from datetime import datetime, timedelta
from typing import Dict

logger = logging.getLogger(__name__)

def format_task_creation(description: str) -> str:
    """Format task creation response with parsed details"""
    if not description:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: '{description}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ª–æ–≤–∞ "—Å—Ä–æ—á–Ω"
    priority = '–≤—ã—Å–æ–∫–∏–π' if '—Å—Ä–æ—á–Ω' in description.lower() else '–æ–±—ã—á–Ω—ã–π'
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
    
    # –®–∞–≥ 2: –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
    cleaners = [
        r't?[–µ—ç]—Ä—Ä?–∞?[,]?\s*',  # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π "—Ç–µ—Ä–∞/—Ç–µ—Ä—Ä–∞"
        r'—Å–æ–∑–¥–∞–π(?:—Ç–µ)?\s+',
        r'—Å–æ–∑–¥–∞—Ç—å\s+',
        r'–¥–æ–±–∞–≤—å(?:—Ç–µ)?\s+',
        r'–¥–æ–±–∞–≤–∏—Ç—å\s+',
        r'–ø–æ—Å—Ç–∞–≤(?:—å|–∏—Ç–µ)?\s+',
        r'—Å—Ä–æ—á–Ω—É—é?\s+',
        r'–≤–∞–∂–Ω—É—é?\s+',
        r'–∫—Ä–∏—Ç–∏—á–Ω—É—é?\s+',
        r'–∑–∞–¥–∞—á—É\s*',
        r'–ø–æ—Ä—É—á–µ–Ω–∏–µ\s*',
        r'^[\s,\-‚Äì]+',
        r'[\s,\-‚Äì]+$'
    ]
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    for pattern in cleaners:
        old_text = description
        description = re.sub(pattern, '', description, flags=re.IGNORECASE)
        if old_text != description:
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –æ—á–∏—Å—Ç–∫–∏: '{pattern}' -> '{description}'")
    
    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    task_date = None
    
    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
    date_words = {
        '–∑–∞–≤—Ç—Ä–∞': timedelta(days=1),
        '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': timedelta(days=2),
        '—á–µ—Ä–µ–∑ –¥–µ–Ω—å': timedelta(days=1),
        '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é': timedelta(weeks=1),
        '—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü': timedelta(days=30)
    }
    
    for word, delta in date_words.items():
        if word in description.lower():
            task_date = datetime.now() + delta
            description = description.replace(word, '').strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ —Å–ª–æ–≤—É '{word}': {task_date}")
            break
    
    # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏
    time_match = re.search(r'–≤\s+(\d{1,2})(?:[:.:](\d{2}))?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?', description)
    if time_match:
        hours = int(time_match.group(1))
        minutes = int(time_match.group(2)) if time_match.group(2) else 0
        
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            if task_date:
                task_date = task_date.replace(hour=hours, minute=minutes)
            else:
                task_date = datetime.now().replace(hour=hours, minute=minutes)
                if task_date < datetime.now():
                    task_date += timedelta(days=1)
            
            description = re.sub(r'–≤\s+\d{1,2}(?:[:.:]?\d{2})?\s*(?:—á–∞—Å[–æ–∞]–≤?|—á–∞—Å|—á)?\s*', '', description)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hours}:{minutes:02d}")
    
    # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = ' '.join(word for word in description.split() if word)
    # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    description = description.rstrip('.')
    logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
    
    # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_parts = [
        "‚úÖ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:",
        f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}",
    ]
    
    if task_date:
        date_format = '%d.%m.%Y –≤ %H:%M' if task_date.hour != 0 or task_date.minute != 0 else '%d.%m.%Y'
        response_parts.append(f"\nüìÖ {'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è' if '–≤' in date_format else '–î–∞—Ç–∞'}: {task_date.strftime(date_format)}")
    
    response_parts.extend([
        f"\n‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.capitalize()}",
        "\n‚ú® –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    ])
    
    return ''.join(response_parts)

class CommandProcessor:
    def __init__(self):
        self.context = {}
    
    def process_command(self, command_type: str, entities: Dict) -> str:
        """Process the command based on its type"""
        logger.info(f"Processing command of type: {command_type} with entities: {entities}")
        
        if command_type == 'greeting':
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–ï–†–†–ê. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        if command_type == 'task_creation':
            return format_task_creation(entities.get('description', ''))
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–º–∞–Ω–¥
        business_commands = [
            'marketing', 'client', 'supplier', 'contract',
            'quality', 'risk', 'strategy', 'compliance',
            'innovation', 'document', 'search', 'contact',
            'project', 'analytics', 'employee'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥
        ]
        
        if command_type in business_commands:
            return format_business_command(command_type, entities.get('description', ''))
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."

# Create a singleton instance
command_processor = CommandProcessor()

def format_business_command(command_type: str, description: str) -> str:
    """Format business command response with extended functionality"""
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞: {command_type}")
    logger.debug(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
    
    if not description:
        logger.warning("–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ {command_type}"
    
    # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
    cleaners = [
        r't?[–µ—ç]—Ä—Ä?–∞?[,]?\s*',
        r'—Å–æ–∑–¥–∞–π(?:—Ç–µ)?\s+',
        r'—Å–æ–∑–¥–∞—Ç—å\s+',
        r'–Ω–æ–≤(?:—ã–π|—É—é|–æ–µ)\s+',
        r'–ø–æ–∫–∞–∑–∞—Ç—å\s+',
        r'–ø–æ–∫–∞–∂–∏\s+',
        r'–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å\s+',
        r'–∑–∞–ø—É—Å—Ç–∏(?:—Ç—å)?\s+',
        r'–Ω–∞—á–∞—Ç—å\s+',
        r'—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\s+',
        r'–Ω–∞–∑–Ω–∞—á–∏—Ç—å\s+',
        r'–¥–æ–±–∞–≤–∏—Ç—å\s+',
        r'^[\s,\-‚Äì]+',
        r'[\s,\-‚Äì]+$'
    ]
    
    for pattern in cleaners:
        old_desc = description
        description = re.sub(pattern, '', description, flags=re.IGNORECASE)
        if old_desc != description:
            logger.debug(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}': '{old_desc}' -> '{description}'")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    params = {}
    
    # –ò—â–µ–º —Å—Ä–æ–∫–∏
    deadline_match = re.search(r'–¥–æ\s+(\d{1,2})[.\-](\d{1,2})(?:[.\-](\d{4})|)', description)
    if deadline_match:
        day, month = deadline_match.group(1), deadline_match.group(2)
        year = deadline_match.group(3) if deadline_match.group(3) else str(datetime.now().year)
        params['deadline'] = f"{day}.{month}.{year}"
        description = re.sub(r'–¥–æ\s+\d{1,2}[.\-]\d{1,2}(?:[.\-]\d{4}|)\s*', '', description)
    
    # –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å
    priority_words = {
        '—Å—Ä–æ—á–Ω–æ': '–≤—ã—Å–æ–∫–∏–π',
        '—Å—Ä–æ—á–Ω—ã–π': '–≤—ã—Å–æ–∫–∏–π',
        '–≤–∞–∂–Ω–æ': '–≤—ã—Å–æ–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–Ω–æ': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
        '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
        '–Ω–∏–∑–∫–∏–π': '–Ω–∏–∑–∫–∏–π',
        '–æ–±—ã—á–Ω—ã–π': '—Å—Ä–µ–¥–Ω–∏–π'
    }
    
    status_words = {
        '–≤ —Ä–∞–±–æ—Ç–µ': 'in_progress',
        '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 'in_progress',
        '–∑–∞–≤–µ—Ä—à–µ–Ω': 'completed',
        '–∑–∞–≤–µ—Ä—à—ë–Ω': 'completed',
        '–≥–æ—Ç–æ–≤': 'completed',
        '–æ—Ç–ª–æ–∂–µ–Ω': 'on_hold',
        '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω': 'on_hold',
        '–æ—Ç–º–µ–Ω–µ–Ω': 'cancelled',
        '–æ—Ç–º–µ–Ω—ë–Ω': 'cancelled'
    }
    for word, priority in priority_words.items():
        if word in description.lower():
            params['priority'] = priority
            description = re.sub(rf'\s*{word}\s*', '', description, flags=re.IGNORECASE)
            
    # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
    for word, status in status_words.items():
        if word in description.lower():
            params['status'] = status
            description = re.sub(rf'\s*{word}\s*', '', description, flags=re.IGNORECASE)
            
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞
    team_match = re.search(r'–∫–æ–º–∞–Ω–¥–∞:?\s*([^,.]+)', description, re.IGNORECASE)
    if team_match:
        params['team'] = team_match.group(1).strip()
        description = re.sub(r'–∫–æ–º–∞–Ω–¥–∞:?\s*[^,.]+[,.]?\s*', '', description, flags=re.IGNORECASE)
        
    # –ò—â–µ–º —ç—Ç–∞–ø –ø—Ä–æ–µ–∫—Ç–∞
    stage_match = re.search(r'—ç—Ç–∞–ø:?\s*([^,.]+)', description, re.IGNORECASE)
    if stage_match:
        params['stage'] = stage_match.group(1).strip()
        description = re.sub(r'—ç—Ç–∞–ø:?\s*[^,.]+[,.]?\s*', '', description, flags=re.IGNORECASE)
    
    responses = {
        'marketing': {
            'icon': 'üì¢',
            'action': '–°–æ–∑–¥–∞—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∑–∞–¥–∞—á—É',
            'category': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            'extra_info': lambda p: f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {p.get('priority', '–æ–±—ã—á–Ω—ã–π').capitalize()}" if 'priority' in p else ''
        },
        'employee': {
            'icon': 'üë§',
            'action': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É',
            'category': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
            'extra_info': lambda p: f"\nüìÖ –°—Ä–æ–∫: {p.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')}" if 'deadline' in p else ''
        },
        'project': {
            'icon': 'üìä',
            'action': '–†–∞–±–æ—Ç–∞—é —Å –ø—Ä–æ–µ–∫—Ç–æ–º',
            'category': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
            'extra_info': lambda p: '\n'.join(filter(None, [
                f"üìÖ –°—Ä–æ–∫: {p.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')}" if 'deadline' in p else '',
                f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {p.get('priority', '–æ–±—ã—á–Ω—ã–π').capitalize()}" if 'priority' in p else '',
                f"üìä –°—Ç–∞—Ç—É—Å: {p.get('status', '–Ω–æ–≤—ã–π').replace('_', ' ').capitalize()}" if 'status' in p else '',
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {p.get('team', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞')}" if 'team' in p else '',
                f"üìç –≠—Ç–∞–ø: {p.get('stage', '–ù–∞—á–∞–ª—å–Ω—ã–π')}" if 'stage' in p else ''
            ]))
        },
        'analytics': {
            'icon': 'üìà',
            'action': '–§–æ—Ä–º–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç',
            'category': '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'extra_info': lambda p: f"\n‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {p.get('priority', '–æ–±—ã—á–Ω—ã–π').capitalize()}" if 'priority' in p else ''
        },
        'client': {
            'icon': 'üë•',
            'action': '–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞',
            'category': '–ö–ª–∏–µ–Ω—Ç—ã'
        },
        'supplier': {
            'icon': 'üè≠',
            'action': '–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            'category': '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏'
        },
        'contract': {
            'icon': 'üìã',
            'action': '–°–æ–∑–¥–∞—é –¥–æ–≥–æ–≤–æ—Ä',
            'category': '–î–æ–≥–æ–≤–æ—Ä—ã'
        },
        'quality': {
            'icon': '‚ú®',
            'action': '–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞',
            'category': '–ö–∞—á–µ—Å—Ç–≤–æ'
        },
        'risk': {
            'icon': '‚ö†Ô∏è',
            'action': '–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –æ —Ä–∏—Å–∫–µ',
            'category': '–†–∏—Å–∫–∏'
        },
        'strategy': {
            'icon': 'üéØ',
            'action': '–°–æ–∑–¥–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É',
            'category': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è'
        }
    }
    
    response_info = responses.get(command_type, {
        'icon': 'üìù',
        'action': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É',
        'category': command_type.capitalize()
    })
    
    response_parts = [
        f"{response_info['icon']} {response_info['action']}:",
        f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}",
        f"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {response_info['category']}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if 'extra_info' in response_info:
        extra = response_info['extra_info'](params)
        if extra:
            response_parts.append(extra)
    
    response_parts.append("\n‚ú® –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")
    
    return ''.join(response_parts)

def process_command(command_type: str, entities: Dict) -> str:
    """Global function to process commands"""
    return command_processor.process_command(command_type, entities)
